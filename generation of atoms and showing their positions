import sys
import numpy as np
import numpy
import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QApplication, QLineEdit, QTextEdit, QPlainTextEdit, QMainWindow 




class MyWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
	# TODO add an option for a user to choose the file from GUI.
        # consequently initialising self.atoms should be moved away
        # from constructor  
        self.atoms=np.genfromtxt('dump.coordss', delimiter=" ", names=True)
        numatoms=len(self.atoms)
        xa=self.atoms['x']
        ya=self.atoms['y']
        #openFile in main Menu
        openFile= QtGui.QAction('&Open File', self)
        openFile.setShortcut('Ctrl+Q')
        openFile.setStatusTip('Open File')
        openFile.triggered.connect(self.file_open)
        self.statusBar()
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(openFile)
         
        #textbox and buttons
        self.label =QtGui.QLabel("Position of atoms:",self)
        self.label.move(40,38+ya[7998]*10)
        self.e2 = QPlainTextEdit(self)
        self.e2.resize(25+xa[7929]*10,150)
        self.e2.move(40,60+ya[7929]*10)
        self.button =QtGui.QPushButton(self)
        self.button.setText('Update List')
        self.button.move(70+xa[7929]*10,70+ya[7929]*10)
        self.button.clicked.connect(self.on_button_clicked)

        self.rep_atoms=[]

    def findcolor(self):
        """The function which is called when a user clicks on a atom.
        """
        xa=self.atoms['x']
        ya=self.atoms['y']
	# sender is the atom
        sender = self.sender()
        
        atom_id = int(sender.objectName())
	if atom_id not in self.rep_atoms:
            # the unclicked atom got clicked...
  
	    self.rep_atoms.append(atom_id)
	    # extra printing for bauty:
	    self.e2.appendPlainText("Atom No: "+str(atom_id)+" "+
				    "x: "+str(xa[atom_id])+" "+
				    "y: "+str(ya[atom_id])+"\n")

	    # change coolur of the sender object (atom) to red:
	    sender.setStyleSheet('background-color: red')
	    
	else:
	    # already clicked button/atom	    
	    self.rep_atoms.remove(atom_id)
           
	    # set colour of the sender object (atom) to green (?)
	    sender.setStyleSheet('background-color: green')
            
    
    def on_button_clicked(self):
	"""User clicked on update_list button:"""
        self.e2.clear()
        xa=self.atoms['x']
        ya=self.atoms['y']
        for i in self.rep_atoms:
            self.e2.appendPlainText("Atom No: "+str(i)+"  "+"x: "+str(xa[i])+"   "+"y: "+str(ya[i])) 

 
    def file_open(self):
        child = MyWindow(self)
        name=QtGui.QFileDialog.getOpenFileName(self, 'openfile')
        file = open(name,'r')
        fname=str(name)
        print type(fname)
        self.buttons()
        child.show()

    def buttons(self):
        self.atoms=np.genfromtxt('dump.coordss', delimiter=" ", names=True)    
        numatoms=len(self.atoms)
        xa=self.atoms['x']
        ya=self.atoms['y'] 
        for i in range(numatoms):
           self.b =QtGui.QPushButton(self)
           #self.setCentralWidget(self.b)
           self.b.setText(str(i))
           self.b.setObjectName('%d' % i)
           self.b.resize(8,8)
           self.b.move(40.0+xa[i]*10.0,25+ya[i]*10)
           self.b.setStyleSheet("QPushButton { background-color: green}") 
           self.b.clicked.connect(self.findcolor)
           self.b.show()
        
        
        

# Opens the main window (?)
app=QApplication(sys.argv)

if __name__ == '__main__':
    MyWindow()
    w=MyWindow()
    w.setGeometry(1000, 1000, 1200, 1200)
    w.setWindowTitle('Lattice Structure')   
    w.show()
    sys.exit(app.exec_())


