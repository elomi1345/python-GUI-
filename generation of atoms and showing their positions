from custombutton import *
from point_on_linesegment import *
import matplotlib
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
from matplotlib.figure import Figure
import os

class MyWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        """Main Function includes:
        Main Menubar
        Text Editor , update list & create mesh button
        """
        super(MyWindow, self).__init__(parent)
        openFile=QtGui.QAction("&Open File",self)
        openFile.setShortcut("Ctrl+o")
        openFile.setStatusTip('Open File')
        openFile.triggered.connect(self.file_open)
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(openFile)
        #call main _frame function
        self.create_main_frame()

        #to get the positions text file
        #label does not work yet FIX IT !!!
        #self.label =QtGui.QLabel("Position of atom:",self)
        #self.label.move(40,791)

        # Auxiliary output text box
        self.txtbox = QPlainTextEdit(self)
        self.txtbox.resize(400,150)
        self.txtbox.move(40,815)
        # An update list button
        self.update_button =QtGui.QPushButton(self)
        self.update_button.setText('Update List')
        self.update_button.move(450,815)
        self.update_button.clicked.connect(self.on_update_click)
        # A mesh button
        self.mesh_button =QtGui.QPushButton(self)
        self.mesh_button.setText('Create Mesh')
        self.mesh_button.setFixedWidth(130)
        self.mesh_button.move(450,860)

        # stores repatom number
        self.rep_atoms=[]

        # Atom id when a user did a right click
        self.right_click_prev_atom_id=-1
    def file_open(self):
        """User opens the textfile which contains position of atoms.
        """
        name=QtGui.QFileDialog.getOpenFileName(self, 'Open File')
        file=open(name,'r')
        #Convert name of textfile from Unicode to string
        self.fname=str(name)
        self.gen_atoms()


    def create_main_frame(self):
        *self.main_frame = QtGui.QWidget()

        # Create the mpl Figure and FigCanvas objects.
        # 5x4 inches, 100 dots-per-inch
        #
        self.dpi = 100
        self.fig = Figure((8.0, 8.0), dpi=self.dpi)
        self.canvas = FigureCanvas(self.fig)
        *self.canvas.setParent(self.main_frame)

        # Since we have only one plot, we can use add_axes
        # instead of add_subplot, but then the subplot
        # configuration tool in the navigation toolbar wouldn't
        # work.
        #
        self.axes = self.fig.add_subplot(111)

        # Create the navigation toolbar, tied to the canvas
        #
        #self.mpl_toolbar = NavigationToolbar(self.canvas, self.main_frame)
        self.draw_button = QtGui.QPushButton(self)
        self.draw_button.setText('Draw')
        self.draw_button.move(450,910)

        hbox = QtGui.QHBoxLayout()
        w=self.draw_button

        hbox.addWidget(w)
        #hbox.setAlignment(w, Qt.AlignVCenter)

        vbox = QtGui.QVBoxLayout()
        vbox.addWidget(self.canvas)
        vbox.addLayout(hbox)

        *self.main_frame.setLayout(vbox)

        *self.setCentralWidget(self.main_frame)


    def gen_atoms(self):
        """Acoording to the Selected textfile:
        At position of each atom, a button will be generated.
        """
        self.atoms=np.genfromtxt(self.fname, delimiter=" ", names=True)
        self.numatoms=len(self.atoms)
        self.xa=self.atoms['x']
        self.ya=self.atoms['y']

        self.b = []
        for i in range(self.numatoms):
            # create buttons with CustomButton class
            # insert each atom in an array
            self.b.append( CustomButton(self) )
            self.b[i].setText(str(i))
            self.b[i].setObjectName('%d' % i)
            self.b[i].resize(8,8)
            self.b[i].move(40.0+self.xa[i]*10.0,25+self.ya[i]*10)
            self.b[i].setStyleSheet("QPushButton { background-color: green}")
            #recieves left_click signal and connect to left_click function
            self.b[i].left_click.connect(self.left_click)
            #recieves right_click signal and connect to right_click function
            self.b[i].right_click.connect(self.right_click)
            self.b[i].show()

    def left_click(self):
        """Call-back function for a left button click on an atom"""
        self.right_click_prev_atom_id=-1

        # first, add an atom:
        self.single_choose()

    def right_click(self):
        """Call-back function for a right button click on an atom"""
        sender = self.sender()
        # first, add an atom:
        self.single_choose()

        # if we called twice in a raw right button:

        if self.right_click_prev_atom_id>=0:
            self.group_choose()
        self.right_click_prev_atom_id=int(sender.objectName())

    def group_choose(self):
        """ Function which controls that an atom is
        between two right-clicked atoms or not.
        already called inside right_click(self)
        """
        sender = self.sender()
        first_atom_id  = self.right_click_prev_atom_id
        second_atom_id = int(sender.objectName())

        for i in range(self.numatoms):
            if (i not in self.rep_atoms) and \
            point_within_a_segment(self.xa[first_atom_id],
                                   self.ya[first_atom_id],
                                   self.xa[second_atom_id],
                                   self.ya[second_atom_id],
                                   self.xa[i],
                                   self.ya[i]):
                self.rep_atoms.append(i)
                self.b[i].setStyleSheet('background-color: red')

    def single_choose(self):
        """already called inside left_click(self) & right_click(self)
        1) The color of button will change from green to red and vice versa for unclicking.
        2) Position & number of marked atom will appear in text editor.
        """
        # sender is the atom
        sender = self.sender()
        atom_id = int(sender.objectName())

        if atom_id not in self.rep_atoms:
            # the unclicked atom got clicked...
            self.rep_atoms.append(atom_id)

            # extra printing for beauty:
            self.txtbox.clear()
            self.txtbox.appendPlainText(
                "Atom No: "+str(atom_id)+" "+
                "x: "+str(self.xa[atom_id])+" "+
                "y: "+str(self.ya[atom_id]))

            # change colour of the sender object (atom) to red:
            sender.setStyleSheet('background-color: red')
        else:
            # already clicked button/atom
            self.rep_atoms.remove(atom_id)

            # set colour of the sender object (atom) to green
            sender.setStyleSheet('background-color: green')

    def on_update_click(self):
        """User clicked on update_list button:
        First of all text box will be cleaned.
        User can observe position list for all of the marked atoms."""

        self.txtbox.clear()
        for i in self.rep_atoms:
            self.txtbox.appendPlainText(
                "Atom No: "+str(i)+" "+
                "x: "+str(self.xa[i])+" "+
                "y: "+str(self.ya[i]))


#main settings of GUI
app=QApplication(sys.argv)
# enable below commands to run code directly
#if __name__ == '__main__':
#   w=MyWindow()
#   w.setGeometry(1000, 1000, 1200, 1200)
#   w.setWindowTitle('QC')
#   w.show()
#sys.exit(app.exec_())
##################################################################################
from __future__ import absolute_import
from __future__ import print_function
from six.moves import range
from mywindow import *

MyWindow()
w=MyWindow()
def example(w):
    """Shows window
    Store repatoms in points as the nodes of mesh.
    """
    w.show()
    #User clicks on Create Mesh
    w.mesh_button.clicked.connect(on_mesh_click)
    w.draw_button.clicked.connect(on_mesh_click)
    #create_main_frame()
def on_mesh_click():
    """get the signal and create the mesh
    """
    import meshpy.triangle as triangle
    points=[]
    for i in w.rep_atoms:
        points.append((w.xa[i],-1*w.ya[i]))
    def round_trip_connect(start, end):
      result = []
      for i in range(start, end):
        result.append((i, i+1))
      result.append((end, start))
      return result

    info = triangle.MeshInfo()
    info.set_points(points)
    info.set_facets(round_trip_connect(0, len(points)-1))

    mesh = triangle.build(info, max_volume=5000, min_angle=25)
    """store nodes(includes position of nodes)
    & elements(includes nodes number which create every element)
    """
    mesh_points = np.array(mesh.points)
    mesh_tris = np.array(mesh.elements)
    #draw plot of mesh
    import matplotlib.pyplot as pt
    w.create_main_frame.axis.plot(mesh_points[:, 0], mesh_points[:, 1], mesh_tris)
    w.canvas.draw()
    #pt.show()


"""def create_main_frame():
    main_frame = QtGui.QWidget()

        # Create the mpl Figure and FigCanvas objects.
        # 5x4 inches, 100 dots-per-inch
        #
    dpi = 100
    fig = Figure((4.0, 4.0), dpi=dpi)
    canvas = FigureCanvas(fig)
    canvas.setParent(main_frame)

        # Since we have only one plot, we can use add_axes
        # instead of add_subplot, but then the subplot
        # configuration tool in the navigation toolbar wouldn't
        # work.
        #
    axes = fig.add_subplot(111)

        # Create the navigation toolbar, tied to the canvas
        #
    mpl_toolbar = NavigationToolbar(canvas, main_frame)

    w.setCentralWidget(main_frame)"""

#Opens the main window
if __name__ == '__main__':
    w=MyWindow()
    w.setGeometry(1000, 1000, 1200, 1200)
    w.setWindowTitle('QC')
    example(w)
    """import pyqtgraph as pg
    pg.setConfigOption('background', 'w')
    view = pg.GraphicsWindow()  ## GraphicsView with GraphicsLayout inserted by default
    w.setCentralWidget(view)
    w1 = view.addPlot()
    n = 300
    s1 = pg.ScatterPlotItem(size=10, pen=pg.mkPen(None), brush=pg.mkBrush(255, 255, 255, 120))
    pos = np.random.normal(size=(2,n), scale=1e-5)
    spots = [{'pos': pos[:,i], 'data': 1} for i in range(n)] + [{'pos': [0,0], 'data': 1}]
    s1.addPoints(spots)
    w1.addItem(s1)"""

sys.exit(app.exec_())
##############################################################################################################
"""
This demo demonstrates how to embed a matplotlib (mpl) plot
into a PyQt4 GUI application, including:
* Using the navigation toolbar
* Adding data to the plot
* Dynamically modifying the plot's properties
* Processing mpl events
* Saving the plot to a file from a menu
The main goal is to serve as a basis for developing rich PyQt GUI
applications featuring mpl plots (using the mpl OO API).
Eli Bendersky (eliben@gmail.com)
License: this code is in the public domain
Last modified: 19.01.2009
"""
import sys, os, random
from PyQt4.QtCore import *
from PyQt4.QtGui import *

import matplotlib
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
from matplotlib.figure import Figure


class AppForm(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)
        self.setWindowTitle('Demo: PyQt with matplotlib')

        self.create_menu()
        self.create_main_frame()
        self.create_status_bar()

        self.textbox.setText('1 2 3 4')
        self.on_draw()

    def save_plot(self):
        file_choices = "PNG (*.png)|*.png"

        path = unicode(QFileDialog.getSaveFileName(self,
                        'Save file', '',
                        file_choices))
        if path:
            self.canvas.print_figure(path, dpi=self.dpi)
            self.statusBar().showMessage('Saved to %s' % path, 2000)

    def on_about(self):
        msg = """ A demo of using PyQt with matplotlib:

         * Use the matplotlib navigation bar
         * Add values to the text box and press Enter (or click "Draw")
         * Show or hide the grid
         * Drag the slider to modify the width of the bars
         * Save the plot to a file using the File menu
         * Click on a bar to receive an informative message
        """
        QMessageBox.about(self, "About the demo", msg.strip())

    def on_pick(self, event):
        # The event received here is of the type
        # matplotlib.backend_bases.PickEvent
        #
        # It carries lots of information, of which we're using
        # only a small amount here.
        #
        box_points = event.artist.get_bbox().get_points()
        msg = "You've clicked on a bar with coords:\n %s" % box_points

        QMessageBox.information(self, "Click!", msg)

    def on_draw(self):
        """ Redraws the figure
        """
        str = unicode(self.textbox.text())
        self.data = map(int, str.split())

        x = range(len(self.data))

        # clear the axes and redraw the plot anew
        #
        self.axes.clear()
        self.axes.grid(self.grid_cb.isChecked())

        self.axes.bar(
            left=x,
            height=self.data,
            width=self.slider.value() / 100.0,
            align='center',
            alpha=0.44,
            picker=5)

        self.canvas.draw()

    def create_main_frame(self):
        self.main_frame = QWidget()

        # Create the mpl Figure and FigCanvas objects.
        # 5x4 inches, 100 dots-per-inch
        #
        self.dpi = 100
        self.fig = Figure((5.0, 4.0), dpi=self.dpi)
        self.canvas = FigureCanvas(self.fig)
        self.canvas.setParent(self.main_frame)

        # Since we have only one plot, we can use add_axes
        # instead of add_subplot, but then the subplot
        # configuration tool in the navigation toolbar wouldn't
        # work.
        #
        self.axes = self.fig.add_subplot(111)

        # Bind the 'pick' event for clicking on one of the bars
        #
        self.canvas.mpl_connect('pick_event', self.on_pick)

        # Create the navigation toolbar, tied to the canvas
        #
        self.mpl_toolbar = NavigationToolbar(self.canvas, self.main_frame)

        # Other GUI controls
        #
        self.textbox = QLineEdit()
        self.textbox.setMinimumWidth(200)
        self.connect(self.textbox, SIGNAL('editingFinished ()'), self.on_draw)

        self.draw_button = QPushButton("&Draw")
        self.connect(self.draw_button, SIGNAL('clicked()'), self.on_draw)

        self.grid_cb = QCheckBox("Show &Grid")
        self.grid_cb.setChecked(False)
        self.connect(self.grid_cb, SIGNAL('stateChanged(int)'), self.on_draw)

        slider_label = QLabel('Bar width (%):')
        self.slider = QSlider(Qt.Horizontal)
        self.slider.setRange(1, 100)
        self.slider.setValue(20)
        self.slider.setTracking(True)
        self.slider.setTickPosition(QSlider.TicksBothSides)
        self.connect(self.slider, SIGNAL('valueChanged(int)'), self.on_draw)

        #
        # Layout with box sizers
        #
        hbox = QHBoxLayout()

        for w in [  self.textbox, self.draw_button, self.grid_cb,
                    slider_label, self.slider]:
            hbox.addWidget(w)
            hbox.setAlignment(w, Qt.AlignVCenter)

        vbox = QVBoxLayout()
        vbox.addWidget(self.canvas)
        vbox.addWidget(self.mpl_toolbar)
        vbox.addLayout(hbox)

        self.main_frame.setLayout(vbox)
        self.setCentralWidget(self.main_frame)

    def create_status_bar(self):
        self.status_text = QLabel("This is a demo")
        self.statusBar().addWidget(self.status_text, 1)

    def create_menu(self):
        self.file_menu = self.menuBar().addMenu("&File")

        load_file_action = self.create_action("&Save plot",
            shortcut="Ctrl+S", slot=self.save_plot,
            tip="Save the plot")
        quit_action = self.create_action("&Quit", slot=self.close,
            shortcut="Ctrl+Q", tip="Close the application")

        self.add_actions(self.file_menu,
            (load_file_action, None, quit_action))

        self.help_menu = self.menuBar().addMenu("&Help")
        about_action = self.create_action("&About",
            shortcut='F1', slot=self.on_about,
            tip='About the demo')

        self.add_actions(self.help_menu, (about_action,))

    def add_actions(self, target, actions):
        for action in actions:
            if action is None:
                target.addSeparator()
            else:
                target.addAction(action)

    def create_action(  self, text, slot=None, shortcut=None,
                        icon=None, tip=None, checkable=False,
                        signal="triggered()"):
        action = QAction(text, self)
        if icon is not None:
            action.setIcon(QIcon(":/%s.png" % icon))
        if shortcut is not None:
            action.setShortcut(shortcut)
        if tip is not None:
            action.setToolTip(tip)
            action.setStatusTip(tip)
        if slot is not None:
            self.connect(action, SIGNAL(signal), slot)
        if checkable:
            action.setCheckable(True)
        return action


def main():
    app = QApplication(sys.argv)
    form = AppForm()
    form.show()
    app.exec_()


if __name__ == "__main__":
    main()

